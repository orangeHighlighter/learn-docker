Why use Docker?

Docker attempts to solve problem where by errors appear during software installation.

    For example, npm packages requiring certain node version etc. 

    Docker in a nut shell:
        On mac redis installation guide does not work simply by copy pasting https://redis.io/downloadc copy
            docker run -it redis on the other hand installs redis 

Takeaway: 
    Docker makes it really easy to install and run software without worrying about setup or dependencies.

What is Docker? 
    Docker is a platform containing a number of apps/tools(Docker Client, Server, Machine, Images, Hub, Compose)
     in its ecosystem for creating and running containers.

    Image:
        Single file with all the dependencies and configurations required to run a program.

    Container:
        An instance of an image (runs a program).

    When we ran 'docker run -it redis' the Docker CLI, reached out the Docker Hub and downloaded an image.

Docker for Mac/Windows:
    Docker Client:
        Also known as Docker Command Line Interface(CLI), is a tool we are going to use to issue commands to.

    Docker Server:
        Also known as a Docker Daemon, is a tool responsible for creating images, running containers, etc.

Mac OSX:
    1. Need to sign up for an account.
    2. Download docker for mac
    3. Docker ID publicly visible, install and login to Docker
        verify installation with docker version

    Windows has a similar installation guide.

    https://docs.docker.com/install/linux/docker-ce/ubuntu/#prerequisites

        On all linux oss' must uninstall older versions of Docker
        
        For Ubuntu (which is what I am using)

            sudo apt-get remove docker docker-engine docker.io containerd runc

        Community package is now called docker-ce

            terminal installation commands:

                # Step 1
                sudo apt-get update
                
                # Step 2
                sudo apt-get install \
                apt-transport-https \
                ca-certificates \
                curl \
                gnupg-agent \
                software-properties-common

                # Step 3
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

                # Step 3
                sudo apt-key fingerprint 0EBFCD88

                # Step 4 (bionic, x86_64)
                sudo add-apt-repository \
                "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
                $(lsb_release -cs) \
                stable"

                # Step 5
                sudo apt-get install docker-ce docker-ce-cli containerd.io

                # Step 6 verify installation
                sudo docker run hello-world

            next we need to install Docker Compose
                https://docs.docker.com/compose/install/#install-compose

                # Step 1
                sudo curl -L "https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

                # Step 2
                sudo chmod +x /usr/local/bin/docker-compose

                # Step 3 verify installation
                docker-compose --version

            running docker without sudo
                https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user
                
                # Step 1
                sudo groupadd docker

                # Step 2 
                sudo usermod -aG docker $USER

                # Step 3
                newgrp docker 

                # Step 4 verify docker runs without sudo
                docker run hello-world

                
Using the Docker Client

    Flow:
        # P1 run cli command 
        docker run hello-world
            # |-> Starts Docker Client (CLI)
                # |-> After successfully starting Docker Client communicates commands to Docker Server
                    # |-> Docker Server checks Image Cache for hello-world container
                        # |-> If image does not exist, Docker Server connects to Docker Hub 
                            # Docker Hub is a repository of free Docker Images


What's a Container? 

    Hypothetically, if 2 (A & B) programs need different versions of the same dependency to run correctly,
    and we are constrained to installing a single version only, it follows that only one of the 2 afore 
    mentioned programs can run locally.

    We can resolve the dependency issue by fragmenting (name spacing) our hard drive, such that specific
    memory addresses are dedicated to storing each of the required dependency version.

    When program A or B make a call, the kernel will need to figure out which process the call is coming from
    and read from the correct fragment.

    Namespacing:
        Isolate resource per group of processes (can be used to restrict access to Network, communications to 
        other processes, etc.)

    Control Groups (cgroups):
        Unlike namespacing, control groups are used to restrict the amount of resources a process group can use.
        (Restrict memory, cpu usage, i/o, bandwidth)
    
    Docker Container:
        Combines concept of namespacing and control grouping
        A container is a running process along with a subset of physical resources allocated to the same.
        An Image is a snapshot of the file system required to run the process, along with a StartUp Command

Docker CLI commands

    # Alias docker
    docker
        |-> References to the docker client

    # Flag run
    docker run
            |-> Attempt to create and start a container process
    
    # Flag image 
    docker run <image-name>
                    |-> Name of the image to use for this container

    # Flag to override default behavior 
    docker run <image-name> [command1, command2, ...]
                                |-> default command override, executes once Container started up
    # for example:
    docker run busybox echo hi there
    # where busybox is name of image, echo is command override,
    # and 'hi there' is argument passed to echo, (note: this won't work with hello-world as it is
    # a single file, where as busybox emulates an OS)
    docker run busybox ls -a 
    # |-> creates busybox Docker Container, and process is ls -a, not the busybox startup command!
    # !!! To chain multiple override commands, add a semicolon(;) after each command

Listing All Running Containers && Processes

    docker ps
          # |->  List all running containers
        
    To view processes can execute,
        
        docker run busybox ping google.com 

    which measures latency to google server(s), and running docker ps subsequently shows the process

    To kill running processes, use ctrl + c command

    docker ps --all
            # |-> --all flag lists every docker container ever ran on machine

Container Life Cycle

    Creating and running a container are 2 separate processes.

        docker run = docker create;  docker start

        # Create a Container
        docker create <image-name>
                # |-> Attempt to create a Container from an Image
        
        # Start a Container
        docker start <container_id>
                # |-> Attempt to run container process
                # |-> Id of container do start

    For example:

        > user@user:~$ docker create hello-world
        < 91394c85b3a73619114a493b5094573087602b888fc7329eb58fe8487b3a93fe (returns the container id)
        > user@user:~$ docker -a start hello-world
        < ... returns hello-world output

        # -a flag in docker start, tells Docker to watch for the Containers output, then forward it to
        # our terminal

Restarting Stopped Containers

    When a container completes executing its process and exits, we can start it back up.

    docker start -a <container_id> 

    to get container_id, use docker ps --all

    IMPORTANT: 
        After a container has been created, we CANNOT replace the default override command!

Deleting Stopped Containers

    To delete Containers that are taking up memory, run

    docker system prune

    IMPORTANT:
        docker system prune will also delete other items, including docker build cache
            where build cache is any image fetched from the Docker Hub repository

Retrieving Log Outputs

    To get logs from a container, use

    docker logs <container_id>

    IMPORTANT:
        Calling docker logs, DOES NOT, rerun or recreate the container! Only retrieves logs
        emitted from container

Stopping Containers

    For example:
        > docker create busybox ping google.com
        < container_id
        > docker start container_id # did not add -a 
        < container_id 
        > docker logs container_id
        < ... container logs
        > docker ps --all
        < ... container data

    To stop the docker start container, we can call 1 of 2 possible commands

        docker stop <container_id>
        OR 
        docker kill <container_id>

        docker stop
            |-> sends SIGTERM (hardware termination signal from GNU C Library, 
                short for terminate signal)
            |-> allows process to shut down on its schedule, do cleanup, save file,
                emit message, etc.

        docker kill
                |-> sends SIGKILL (short for kill signal, immediately terminates
                    the running process)
        
        When docker stop is called, if container does not stop within 10 seconds,
        docker will automatically default to docker kill

Multi-Command Containers && Executing Commands in Running Containers

    docker run redis
        # |-> redis-server runs in container
        # |-> thus we do not have access to redis-cli

    To resolve this issue we will use another Docker command

    docker exec -it <container_id> <command>
        # where:
            # exec (short for execute), used to execute an additional command in a container
            # -it is a flag that enables us to provide input to the container
            # We should be able to chain commands using semicolons (;)
        # calling docker exec <container_id> <command>, runs the command,
        # but because redis-cli realized it can't be provided any input it closes down
        # then send us back to our local terminal

-it flag

    Every process that we create in Linux has 3 communication channels attached to it.
        STDIN (Standard Input)
        STOUT (Standard Output)
        STDERR (Standard Error)
    These channels are used to communicate information either into or out of the process.

    The -it flag is 2 flags combined in 1
        |-> -i -t, but we shorten it by convention

    -i 
        tells docker when it executes the new command inside the container,
        we wish to attach our terminal to the STDIN channel of the target process.

    -t 
        formats input and output text to our terminal from the process itself